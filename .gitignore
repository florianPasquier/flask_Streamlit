# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a script from PyInstaller, but such scripts are
#  not considered part of this package.  They are excluded by the following globs:
pyinstaller/
__pyinstaller/

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypi.org/doc/install/#uninstalling-packages
#   If you've installed a package in editable mode, or such that it's not
#   under an Installer's control, then you can't uninstall it using that
#   Installer's `uninstall` command. Instead, you'll need to manually remove
#   it, and then possibly re-install the package in non-editable mode, to
#   get full use of the `uninstall` capabilities that Installers provide.
#
#   Note that you can't uninstall packages that are installed as editable
#   via requirements files, e.g.:
#
#       pip install -e .[dev]
#
#   In this case, you'll need to manually remove the package, including
#   deleting its .egg-link (if you're using pip).
#
#   Rather than adding every virtual environment's `site-packages` directory
#   to the global `.gitignore` file, another approach is to add a global
#   `gitignore` that has the following line:
#
#       */*/site-packages/
#
#   Additionally, you might want to force adding `site-packages` to the
#   global gitignore. To do that, run:
#
#       git config --global core.excludesfile ~/.gitignore_global
#
#   Then add the following line:
#
#       */*/site-packages/
#
#   This will avoid checking in the `site-packages` of every virtual
#   environment, resulting in less bloat for your git history.
#
#   A better practice is to use pip's per-repository uninstall, like so:
#
#       pip uninstall -r <path_to_requirements_file>
#
#   rather than installing packages globally.

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.env.*
.envrc
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# Streamlit
.venv/
.env/
__pycache__/
*.pyc
*.pyo
*.pyd
*.pyclass
secrets.toml